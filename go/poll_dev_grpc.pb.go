// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: poll_dev.proto

package services_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PollDriverServiceClient is the client API for PollDriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PollDriverServiceClient interface {
	PollType(ctx context.Context, in *PollTypeRequest, opts ...grpc.CallOption) (*PollTypeResponse, error)
	Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error)
	ChangeMetric(ctx context.Context, in *ChangeMetricRequest, opts ...grpc.CallOption) (*ChangeMetricResponse, error)
	Preset(ctx context.Context, in *PresetRequest, opts ...grpc.CallOption) (*PresetResponse, error)
}

type pollDriverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPollDriverServiceClient(cc grpc.ClientConnInterface) PollDriverServiceClient {
	return &pollDriverServiceClient{cc}
}

func (c *pollDriverServiceClient) PollType(ctx context.Context, in *PollTypeRequest, opts ...grpc.CallOption) (*PollTypeResponse, error) {
	out := new(PollTypeResponse)
	err := c.cc.Invoke(ctx, "/DriverPollProto.PollDriverService/PollType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollDriverServiceClient) Poll(ctx context.Context, in *PollRequest, opts ...grpc.CallOption) (*PollResponse, error) {
	out := new(PollResponse)
	err := c.cc.Invoke(ctx, "/DriverPollProto.PollDriverService/Poll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollDriverServiceClient) ChangeMetric(ctx context.Context, in *ChangeMetricRequest, opts ...grpc.CallOption) (*ChangeMetricResponse, error) {
	out := new(ChangeMetricResponse)
	err := c.cc.Invoke(ctx, "/DriverPollProto.PollDriverService/ChangeMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollDriverServiceClient) Preset(ctx context.Context, in *PresetRequest, opts ...grpc.CallOption) (*PresetResponse, error) {
	out := new(PresetResponse)
	err := c.cc.Invoke(ctx, "/DriverPollProto.PollDriverService/Preset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PollDriverServiceServer is the server API for PollDriverService service.
// All implementations must embed UnimplementedPollDriverServiceServer
// for forward compatibility
type PollDriverServiceServer interface {
	PollType(context.Context, *PollTypeRequest) (*PollTypeResponse, error)
	Poll(context.Context, *PollRequest) (*PollResponse, error)
	ChangeMetric(context.Context, *ChangeMetricRequest) (*ChangeMetricResponse, error)
	Preset(context.Context, *PresetRequest) (*PresetResponse, error)
	mustEmbedUnimplementedPollDriverServiceServer()
}

// UnimplementedPollDriverServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPollDriverServiceServer struct {
}

func (UnimplementedPollDriverServiceServer) PollType(context.Context, *PollTypeRequest) (*PollTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PollType not implemented")
}
func (UnimplementedPollDriverServiceServer) Poll(context.Context, *PollRequest) (*PollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poll not implemented")
}
func (UnimplementedPollDriverServiceServer) ChangeMetric(context.Context, *ChangeMetricRequest) (*ChangeMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMetric not implemented")
}
func (UnimplementedPollDriverServiceServer) Preset(context.Context, *PresetRequest) (*PresetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preset not implemented")
}
func (UnimplementedPollDriverServiceServer) mustEmbedUnimplementedPollDriverServiceServer() {}

// UnsafePollDriverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PollDriverServiceServer will
// result in compilation errors.
type UnsafePollDriverServiceServer interface {
	mustEmbedUnimplementedPollDriverServiceServer()
}

func RegisterPollDriverServiceServer(s grpc.ServiceRegistrar, srv PollDriverServiceServer) {
	s.RegisterService(&PollDriverService_ServiceDesc, srv)
}

func _PollDriverService_PollType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollDriverServiceServer).PollType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverPollProto.PollDriverService/PollType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollDriverServiceServer).PollType(ctx, req.(*PollTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollDriverService_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollDriverServiceServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverPollProto.PollDriverService/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollDriverServiceServer).Poll(ctx, req.(*PollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollDriverService_ChangeMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollDriverServiceServer).ChangeMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverPollProto.PollDriverService/ChangeMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollDriverServiceServer).ChangeMetric(ctx, req.(*ChangeMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollDriverService_Preset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollDriverServiceServer).Preset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DriverPollProto.PollDriverService/Preset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollDriverServiceServer).Preset(ctx, req.(*PresetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PollDriverService_ServiceDesc is the grpc.ServiceDesc for PollDriverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PollDriverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DriverPollProto.PollDriverService",
	HandlerType: (*PollDriverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PollType",
			Handler:    _PollDriverService_PollType_Handler,
		},
		{
			MethodName: "Poll",
			Handler:    _PollDriverService_Poll_Handler,
		},
		{
			MethodName: "ChangeMetric",
			Handler:    _PollDriverService_ChangeMetric_Handler,
		},
		{
			MethodName: "Preset",
			Handler:    _PollDriverService_Preset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poll_dev.proto",
}
